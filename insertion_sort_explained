void insertion_sort_list(listint_t **list)
{
	listint_t *node, *nood, *tmp_next, *tmp_prev;

	if (list == NULL || *list == NULL || (*list)->next == NULL)
		return;

	node = (*list)->next;
	while (node) //first loop goes through nodes from left to right, 
 // inside this loop, the node at hand will be inserted in the right spot in the left array.
	{
		nood = node;
		while (nood->prev != NULL && nood->n < nood->prev->n) //this loop goes from right to left through the nodes that are already sorted
  // it then adds the node (nood) at the right spot, by swapping the ->next and ->prev of the nodes
  // example 2, 4, 3, 7 - nood is pointing to 3.
		{
			tmp_next = nood->next; //first we exchange ->next of the nodes 3 and 4.
			nood->next = nood->prev;
			nood->prev->next = tmp_next;
			if (nood->prev->prev) //we need to change the node 2's next as well so it will point to 3, we check if node 2 exists first
				nood->prev->prev->next = nood;
			else //if node 2 isn't there and the head was node 4, then we make the new head pointing to node 3
				*list = node;
			tmp_prev = nood->prev->prev; //we exchange the ->prev of node 3 and 4
			nood->prev->prev = nood;
			nood->prev = tmp_prev;
			if (nood->next->next) //we also update node 7's ->prev
				nood->next->next->prev = nood->next;

			print_list(*list);
		}
		node = node->next;
	}
}
